<!-- /*********************************************************************
* Copyright (c) Intel Corporation 2019-2021
* SPDX-License-Identifier: Apache-2.0
**********************************************************************/ -->

<!DOCTYPE html>
<html lang="en">

<!-- ************** DO NOT MODIFY HTML/CSS *************** -->

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Intel AMT API Demo</title>
</head>

<style>
  .grid {
    display: grid;
    grid-template-columns: 50% 50%;
    grid-auto-rows: 40vh 40vh;
    margin: 5% 10%;
  }

  .item {
    border: 1px solid black;
    padding: 3%;
  }

  .actions {
    padding: 0;
    margin: 1%;
  }

  .row {
    display: flex;
  }

  .column {
    flex: 50%;
  }
</style>

<!---------- BASIC HTML TEMPLATE FOR DEMO --------- -->

<body>
  <div class="grid">
    <div class="item">
      <h3>1. Get Authorization Token</h3>
      <div>
        <button id="authTest">Test</button>
      </div>
      <p>My Token: <span id="token_output" style="word-wrap: break-word;"></span></p>
    </div>
    <div class="item">
      <h3>2. Hardware Information</h3>
      <div>
        <button id="hwInfoTest">Test</button>
      </div>
      <br>
      <h4>Find and update with correct hardware data</h4>
      <p>CPU: <span id="cpu"></span></p>
      <p>Manufacturer: <span id="man_cpu"></span></p>
      <p>Model: <span id="model"></span></p>
      <p>BIOS Manufacturer: <span id="man_bios"></span></p>
      <p>BIOS Version: <span id="ver_bios"></span></p>
    </div>
    <div class="item">
      <h3>3. Power Capabilities</h3>
      <div>
        <button id="capabilitiesTest">Test</button>
      </div>
      <h4>Find possible power actions</h4>
      <div class="row">
        <div class="column" id="power1"></div>
        <div class="column" id="power2"></div>
      </div>
    </div>
    <div class="item">
      <h3>4. Perform Power Actions</h3>
      <span>Power Action: </span><input type="text" id="actioninput" placeholder="Action Number">
      <div style="margin-top: 5%;">
        <button id="performActionTest">Test</button>
      </div>
      <p id="action_output"></p>
    </div>
  </div>

  <script type="text/javascript">
    //Link the button listeners
    getElementById('authTest').addEventListener('click', getAuth);
    getElementById('hwInfoTest').addEventListener('click', getHW);
    getElementById('capabilitiesTest').addEventListener('click', getFeatures);
    getElementById('performActionTest').addEventListener('click', execReset);






    // ******************* MAKE ALL CHANGES BELOW *******************

    // TODO:
    // Fill out the MPS Server Config Information
    // Edit API Calls by setting the:
    // 	CORRECT URL
    // 	CORRECT Method
    // 	CORRECT Body (if applicable)


    //----------- MPS SERVER CONFIG INFORMATION -------------- 
    var config = {
      username: "",
      password: "",
      deviceGUID: "",
      mpsserverIP: "",
      auth_token: "" //Skip, the auth_token will auto-populate
    };





    //----------- Authorization Token API --------------  

    var auth_url = "" //API URL For Authorize

    function getAuth() {
      console.log('Start fetching auth token.....');

      fetch(auth_url, {
        "headers": {
          "content-type": "application/json"
        },
        "method": "", //REST Method
        "body": JSON.stringify({
          "username": "", //MPS User
          "password": ""  //MPS Pass
        })
      })
        .then(res => {
          return res.json();
        })
        .then(data => {
          // console.log(data);
          getElementById("token_output").innerHTML = data.token;
          config.auth_token = data.token;
        })
        .catch(error => {
          console.log('Caught Exception', error);
        })
    }






    //----------- HARDWARE INFORMATION API --------------  

    var hw_url = "" //API URL for Hardware Information

    function getHW() {
      console.log('Start fetching hardwareInfo.....');

      fetch(hw_url, {
        "headers": {
          "content-type": "application/json",
          "authorization": "Bearer " + config.auth_token
        },
        "method": "" //REST Method
      })
        .then(res => {
          return res.json();
        })
        .then(data => {
          // console.log(data)
          getElementById('cpu').innerHTML = data.CIM_Chip.responses[0].Version;
          getElementById('man_cpu').innerHTML = data.CIM_Chip.responses[0].Manufacturer;
          getElementById('model').innerHTML = data.CIM_Chassis.response.Model;
          getElementById('man_bios').innerHTML = data.CIM_BIOSElement.response.Manufacturer;
          getElementById('ver_bios').innerHTML = data.CIM_BIOSElement.response.Version;
        })
        .catch(error => {
          console.log('Caught Exception', error);
        })
    }





    //----------- POWER CAPABILITIES API --------------  

    var capab_url = "" //API URL for Power Capabilities

    function getFeatures() {
      console.log('Start fetching power capabilities.....');

      fetch(capab_url, {
        "headers": {
          "content-type": "application/json",
          "authorization": "Bearer " + config.auth_token
        },
        "method": "" //REST Method
      })
        .then(res => {
          return res.json();
        })
        .then(data => {
          // console.log(data)
          var inc = 0;
          for (var key of Object.keys(data)) {
            // console.log(key + " -> " + data[key])
            var item = document.createElement('ul');
            item.setAttribute('class', 'actions');
            item.innerHTML = key + " -> " + data[key];
            if (inc < 9) { getElementById("power1").appendChild(item); }
            else { getElementById("power2").appendChild(item); }
            inc++;
          }
        })
        .catch(error => {
          console.log('Caught Exception', error);
        })
    }





    //----------- POWER ACTION API --------------  

    var power_url = "" //API URL for performing Power Actions
    var poweraction = getElementById("actioninput").value;

    function execReset() {
      console.log('Start fetching power action.....');

      fetch(power_url, {
        "headers": {
          "content-type": "application/json",
          "authorization": "Bearer " + config.auth_token
        },
        "method": "", //REST Method
        //The body is already filled out for you
        "body": JSON.stringify({
          "action": poweraction,
          "useSOL": false
        })
      })
        .then(res => {
          return res.json();
        })
        .then(data => {
          // console.log(data);
          getElementById("action_output").innerHTML = data.Body.ReturnValue + ": " + data.Body.ReturnValueStr;
        })
        .catch(error => {
          console.log('Caught Exception', error);
        })
    }



    function getElementById(id) {
      return document.getElementById(id);
    }

  </script>
</body>

</html>